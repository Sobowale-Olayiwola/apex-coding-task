// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username
) VALUES (
  $1
) RETURNING username, created_at
`

func (q *Queries) CreateUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, username)
	var i User
	err := row.Scan(&i.Username, &i.CreatedAt)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(&i.Username, &i.CreatedAt)
	return i, err
}

const getUserTransactionLogs = `-- name: GetUserTransactionLogs :many
SELECT  u.username, e.amount, w.asset, e.created_at as transaction_date, e.id,
       CASE
           WHEN e.amount > 0 THEN 'credit'
           WHEN e.amount < 0 THEN 'debit'
       END transaction_type
FROM users u
INNER JOIN wallets w
ON u.username = w.owner
INNER JOIN entries e
ON w.id = e.wallet_id
WHERE username = $1 
ORDER BY e.created_at
`

type GetUserTransactionLogsRow struct {
	Username        string      `json:"username"`
	Amount          int64       `json:"amount"`
	Asset           string      `json:"asset"`
	TransactionDate time.Time   `json:"transaction_date"`
	ID              int64       `json:"id"`
	TransactionType interface{} `json:"transaction_type"`
}

func (q *Queries) GetUserTransactionLogs(ctx context.Context, username string) ([]GetUserTransactionLogsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserTransactionLogs, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserTransactionLogsRow{}
	for rows.Next() {
		var i GetUserTransactionLogsRow
		if err := rows.Scan(
			&i.Username,
			&i.Amount,
			&i.Asset,
			&i.TransactionDate,
			&i.ID,
			&i.TransactionType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
