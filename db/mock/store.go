// Code generated by MockGen. DO NOT EDIT.
// Source: simpledice/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"
	db "simpledice/db/sqlc"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddWalletBalance mocks base method.
func (m *MockStore) AddWalletBalance(arg0 context.Context, arg1 db.AddWalletBalanceParams) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWalletBalance", arg0, arg1)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWalletBalance indicates an expected call of AddWalletBalance.
func (mr *MockStoreMockRecorder) AddWalletBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWalletBalance", reflect.TypeOf((*MockStore)(nil).AddWalletBalance), arg0, arg1)
}

// CreateAttempt mocks base method.
func (m *MockStore) CreateAttempt(arg0 context.Context, arg1 db.CreateAttemptParams) (db.Attempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttempt", arg0, arg1)
	ret0, _ := ret[0].(db.Attempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttempt indicates an expected call of CreateAttempt.
func (mr *MockStoreMockRecorder) CreateAttempt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttempt", reflect.TypeOf((*MockStore)(nil).CreateAttempt), arg0, arg1)
}

// CreateEntry mocks base method.
func (m *MockStore) CreateEntry(arg0 context.Context, arg1 db.CreateEntryParams) (db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", arg0, arg1)
	ret0, _ := ret[0].(db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockStoreMockRecorder) CreateEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockStore)(nil).CreateEntry), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateTransfer mocks base method.
func (m *MockStore) CreateTransfer(arg0 context.Context, arg1 db.CreateTransferParams) (db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1)
	ret0, _ := ret[0].(db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockStoreMockRecorder) CreateTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockStore)(nil).CreateTransfer), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1, arg2 string) (db.CreateUserResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(db.CreateUserResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1, arg2)
}

// CreateWallet mocks base method.
func (m *MockStore) CreateWallet(arg0 context.Context, arg1 db.CreateWalletParams) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", arg0, arg1)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockStoreMockRecorder) CreateWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockStore)(nil).CreateWallet), arg0, arg1)
}

// DeleteWallet mocks base method.
func (m *MockStore) DeleteWallet(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWallet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWallet indicates an expected call of DeleteWallet.
func (mr *MockStoreMockRecorder) DeleteWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWallet", reflect.TypeOf((*MockStore)(nil).DeleteWallet), arg0, arg1)
}

// EndUserGameSession mocks base method.
func (m *MockStore) EndUserGameSession(arg0 context.Context, arg1 int64) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndUserGameSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndUserGameSession indicates an expected call of EndUserGameSession.
func (mr *MockStoreMockRecorder) EndUserGameSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndUserGameSession", reflect.TypeOf((*MockStore)(nil).EndUserGameSession), arg0, arg1)
}

// FirstDiceThrow mocks base method.
func (m *MockStore) FirstDiceThrow(arg0 context.Context, arg1 db.GetUserWithSessionRow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstDiceThrow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FirstDiceThrow indicates an expected call of FirstDiceThrow.
func (mr *MockStoreMockRecorder) FirstDiceThrow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstDiceThrow", reflect.TypeOf((*MockStore)(nil).FirstDiceThrow), arg0, arg1)
}

// GetAttempt mocks base method.
func (m *MockStore) GetAttempt(arg0 context.Context, arg1 string) (db.Attempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttempt", arg0, arg1)
	ret0, _ := ret[0].(db.Attempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttempt indicates an expected call of GetAttempt.
func (mr *MockStoreMockRecorder) GetAttempt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttempt", reflect.TypeOf((*MockStore)(nil).GetAttempt), arg0, arg1)
}

// GetEntry mocks base method.
func (m *MockStore) GetEntry(arg0 context.Context, arg1 int64) (db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntry", arg0, arg1)
	ret0, _ := ret[0].(db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockStoreMockRecorder) GetEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockStore)(nil).GetEntry), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 int64) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetTransfer mocks base method.
func (m *MockStore) GetTransfer(arg0 context.Context, arg1 int64) (db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfer", arg0, arg1)
	ret0, _ := ret[0].(db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfer indicates an expected call of GetTransfer.
func (mr *MockStoreMockRecorder) GetTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfer", reflect.TypeOf((*MockStore)(nil).GetTransfer), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserTransactionLogs mocks base method.
func (m *MockStore) GetUserTransactionLogs(arg0 context.Context, arg1 string) ([]db.GetUserTransactionLogsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTransactionLogs", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserTransactionLogsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTransactionLogs indicates an expected call of GetUserTransactionLogs.
func (mr *MockStoreMockRecorder) GetUserTransactionLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTransactionLogs", reflect.TypeOf((*MockStore)(nil).GetUserTransactionLogs), arg0, arg1)
}

// GetUserWithSession mocks base method.
func (m *MockStore) GetUserWithSession(arg0 context.Context, arg1 string) (db.GetUserWithSessionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithSession", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserWithSessionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithSession indicates an expected call of GetUserWithSession.
func (mr *MockStoreMockRecorder) GetUserWithSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithSession", reflect.TypeOf((*MockStore)(nil).GetUserWithSession), arg0, arg1)
}

// GetWallet mocks base method.
func (m *MockStore) GetWallet(arg0 context.Context, arg1 int64) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", arg0, arg1)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockStoreMockRecorder) GetWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockStore)(nil).GetWallet), arg0, arg1)
}

// GetWalletByUsername mocks base method.
func (m *MockStore) GetWalletByUsername(arg0 context.Context, arg1 string) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUsername indicates an expected call of GetWalletByUsername.
func (mr *MockStoreMockRecorder) GetWalletByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUsername", reflect.TypeOf((*MockStore)(nil).GetWalletByUsername), arg0, arg1)
}

// GetWalletForUpdate mocks base method.
func (m *MockStore) GetWalletForUpdate(arg0 context.Context, arg1 string) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletForUpdate indicates an expected call of GetWalletForUpdate.
func (mr *MockStoreMockRecorder) GetWalletForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletForUpdate", reflect.TypeOf((*MockStore)(nil).GetWalletForUpdate), arg0, arg1)
}

// ListEntries mocks base method.
func (m *MockStore) ListEntries(arg0 context.Context, arg1 db.ListEntriesParams) ([]db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntries", arg0, arg1)
	ret0, _ := ret[0].([]db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntries indicates an expected call of ListEntries.
func (mr *MockStoreMockRecorder) ListEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntries", reflect.TypeOf((*MockStore)(nil).ListEntries), arg0, arg1)
}

// ListTransfers mocks base method.
func (m *MockStore) ListTransfers(arg0 context.Context, arg1 db.ListTransfersParams) ([]db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransfers", arg0, arg1)
	ret0, _ := ret[0].([]db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransfers indicates an expected call of ListTransfers.
func (mr *MockStoreMockRecorder) ListTransfers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransfers", reflect.TypeOf((*MockStore)(nil).ListTransfers), arg0, arg1)
}

// Listwallets mocks base method.
func (m *MockStore) Listwallets(arg0 context.Context, arg1 db.ListwalletsParams) ([]db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listwallets", arg0, arg1)
	ret0, _ := ret[0].([]db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listwallets indicates an expected call of Listwallets.
func (mr *MockStoreMockRecorder) Listwallets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listwallets", reflect.TypeOf((*MockStore)(nil).Listwallets), arg0, arg1)
}

// SecondDiceThrow mocks base method.
func (m *MockStore) SecondDiceThrow(arg0 context.Context, arg1 db.GetUserWithSessionRow) (db.Attempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecondDiceThrow", arg0, arg1)
	ret0, _ := ret[0].(db.Attempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecondDiceThrow indicates an expected call of SecondDiceThrow.
func (mr *MockStoreMockRecorder) SecondDiceThrow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecondDiceThrow", reflect.TypeOf((*MockStore)(nil).SecondDiceThrow), arg0, arg1)
}

// StartGame mocks base method.
func (m *MockStore) StartGame(arg0 context.Context, arg1 string) (db.StartGameResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartGame", arg0, arg1)
	ret0, _ := ret[0].(db.StartGameResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartGame indicates an expected call of StartGame.
func (mr *MockStoreMockRecorder) StartGame(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGame", reflect.TypeOf((*MockStore)(nil).StartGame), arg0, arg1)
}

// StartNewDiceThrow mocks base method.
func (m *MockStore) StartNewDiceThrow(arg0 context.Context, arg1 db.GetUserWithSessionRow) (db.Attempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartNewDiceThrow", arg0, arg1)
	ret0, _ := ret[0].(db.Attempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartNewDiceThrow indicates an expected call of StartNewDiceThrow.
func (mr *MockStoreMockRecorder) StartNewDiceThrow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartNewDiceThrow", reflect.TypeOf((*MockStore)(nil).StartNewDiceThrow), arg0, arg1)
}

// TransferTx mocks base method.
func (m *MockStore) TransferTx(arg0 context.Context, arg1 db.TransferTxParams) (db.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(db.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockStoreMockRecorder) TransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockStore)(nil).TransferTx), arg0, arg1)
}

// UpdateNumOfDiceThrown mocks base method.
func (m *MockStore) UpdateNumOfDiceThrown(arg0 context.Context, arg1 string) (db.Attempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNumOfDiceThrown", arg0, arg1)
	ret0, _ := ret[0].(db.Attempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNumOfDiceThrown indicates an expected call of UpdateNumOfDiceThrown.
func (mr *MockStoreMockRecorder) UpdateNumOfDiceThrown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNumOfDiceThrown", reflect.TypeOf((*MockStore)(nil).UpdateNumOfDiceThrown), arg0, arg1)
}

// UpdateSessionCurrentAttemptId mocks base method.
func (m *MockStore) UpdateSessionCurrentAttemptId(arg0 context.Context, arg1 db.UpdateSessionCurrentAttemptIdParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionCurrentAttemptId", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSessionCurrentAttemptId indicates an expected call of UpdateSessionCurrentAttemptId.
func (mr *MockStoreMockRecorder) UpdateSessionCurrentAttemptId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionCurrentAttemptId", reflect.TypeOf((*MockStore)(nil).UpdateSessionCurrentAttemptId), arg0, arg1)
}

// UpdateValueofFirstDiceThrown mocks base method.
func (m *MockStore) UpdateValueofFirstDiceThrown(arg0 context.Context, arg1 db.UpdateValueofFirstDiceThrownParams) (db.Attempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateValueofFirstDiceThrown", arg0, arg1)
	ret0, _ := ret[0].(db.Attempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateValueofFirstDiceThrown indicates an expected call of UpdateValueofFirstDiceThrown.
func (mr *MockStoreMockRecorder) UpdateValueofFirstDiceThrown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValueofFirstDiceThrown", reflect.TypeOf((*MockStore)(nil).UpdateValueofFirstDiceThrown), arg0, arg1)
}

// UpdateValueofSecondDiceThrown mocks base method.
func (m *MockStore) UpdateValueofSecondDiceThrown(arg0 context.Context, arg1 db.UpdateValueofSecondDiceThrownParams) (db.Attempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateValueofSecondDiceThrown", arg0, arg1)
	ret0, _ := ret[0].(db.Attempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateValueofSecondDiceThrown indicates an expected call of UpdateValueofSecondDiceThrown.
func (mr *MockStoreMockRecorder) UpdateValueofSecondDiceThrown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValueofSecondDiceThrown", reflect.TypeOf((*MockStore)(nil).UpdateValueofSecondDiceThrown), arg0, arg1)
}

// UpdateWallet mocks base method.
func (m *MockStore) UpdateWallet(arg0 context.Context, arg1 db.UpdateWalletParams) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", arg0, arg1)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockStoreMockRecorder) UpdateWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockStore)(nil).UpdateWallet), arg0, arg1)
}
