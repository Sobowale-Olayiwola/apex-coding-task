// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: session.sql

package db

import (
	"context"
	"database/sql"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  is_active, owner, current_attempt_id
) VALUES (
  $1, $2, $3
) RETURNING id, current_attempt_id, owner, is_active, created_at
`

type CreateSessionParams struct {
	IsActive         bool           `json:"is_active"`
	Owner            string         `json:"owner"`
	CurrentAttemptID sql.NullString `json:"current_attempt_id"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.IsActive, arg.Owner, arg.CurrentAttemptID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.CurrentAttemptID,
		&i.Owner,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const endUserGameSession = `-- name: EndUserGameSession :one
UPDATE sessions SET is_active = FALSE
WHERE id = $1 AND is_active = TRUE
RETURNING id, current_attempt_id, owner, is_active, created_at
`

func (q *Queries) EndUserGameSession(ctx context.Context, id int64) (Session, error) {
	row := q.db.QueryRowContext(ctx, endUserGameSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.CurrentAttemptID,
		&i.Owner,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, current_attempt_id, owner, is_active, created_at FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id int64) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.CurrentAttemptID,
		&i.Owner,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getUserWithSession = `-- name: GetUserWithSession :one
SELECT  s.owner, s.current_attempt_id, s.is_active, s.id, a.target_number, a.num_of_dice_throw, a.first_dice_throw_value, a.second_dice_throw_value FROM sessions s
INNER JOIN attempts a
ON s.current_attempt_id = a.id
WHERE owner = $1 
AND s.is_active = TRUE
ORDER BY s.created_at
LIMIT 1
`

type GetUserWithSessionRow struct {
	Owner                string         `json:"owner"`
	CurrentAttemptID     sql.NullString `json:"current_attempt_id"`
	IsActive             bool           `json:"is_active"`
	ID                   int64          `json:"id"`
	TargetNumber         int16          `json:"target_number"`
	NumOfDiceThrow       int16          `json:"num_of_dice_throw"`
	FirstDiceThrowValue  int16          `json:"first_dice_throw_value"`
	SecondDiceThrowValue int16          `json:"second_dice_throw_value"`
}

func (q *Queries) GetUserWithSession(ctx context.Context, owner string) (GetUserWithSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getUserWithSession, owner)
	var i GetUserWithSessionRow
	err := row.Scan(
		&i.Owner,
		&i.CurrentAttemptID,
		&i.IsActive,
		&i.ID,
		&i.TargetNumber,
		&i.NumOfDiceThrow,
		&i.FirstDiceThrowValue,
		&i.SecondDiceThrowValue,
	)
	return i, err
}

const updateSessionCurrentAttemptId = `-- name: UpdateSessionCurrentAttemptId :one
UPDATE sessions SET current_attempt_id = $2
WHERE id = $1
RETURNING id, current_attempt_id, owner, is_active, created_at
`

type UpdateSessionCurrentAttemptIdParams struct {
	ID               int64          `json:"id"`
	CurrentAttemptID sql.NullString `json:"current_attempt_id"`
}

func (q *Queries) UpdateSessionCurrentAttemptId(ctx context.Context, arg UpdateSessionCurrentAttemptIdParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSessionCurrentAttemptId, arg.ID, arg.CurrentAttemptID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.CurrentAttemptID,
		&i.Owner,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}
